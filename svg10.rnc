# =====================================================================
#   This is the DTD for SVG 1.0.
# 
#   The specification for SVG that corresponds to this DTD is available at:
# 
#     http://www.w3.org/TR/2001/REC-SVG-20010904/
# 
#   Copyright (c) 2000 W3C (MIT, INRIA, Keio), All Rights Reserved.
# 
#   For SVG 1.0:
# 
#     Namespace:
#       http://www.w3.org/2000/svg  
# 
#     Public identifier:
#       PUBLIC "-//W3C//DTD SVG 1.0//EN"
# 
#     URI for the DTD:
#       http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd
# =============================================================================

# ==============================================================
# ENTITY DECLARATIONS: Data types 
# ==============================================================

default namespace = "http://www.w3.org/2000/svg"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace xlink = "http://www.w3.org/1999/xlink"

BaselineShiftValue = string
# 'baseline-shift' property/attribute value (e.g., 'baseline', 'sub', etc.)
Boolean = "false" | "true"
# feature specification
ClassList = string
# list of classes
ClipValue = string
# 'clip' property/attribute value (e.g., 'auto', rect(...))
ClipPathValue = string
# 'clip-path' property/attribute value (e.g., 'none', %URI;)
ClipFillRule = "nonzero" | "evenodd" | "inherit"
# 'clip-rule' or fill-rule property/attribute value
ContentType = string
# media type, as per [RFC2045]
Coordinate = string
# a <coordinate>
Coordinates = string
# a list of <coordinate>s
Color = string
# a <color> value
CursorValue = string
# 'cursor' property/attribute value (e.g., 'crosshair', %URI;)
EnableBackgroundValue = string
# 'enable-background' property/attribute value (e.g., 'new', 'accumulate')
ExtensionList = string
# extension list specification
FeatureList = string
# feature list specification
FilterValue = string
# 'filter' property/attribute value (e.g., 'none', %URI;)
FontFamilyValue = string
# 'font-family' property/attribute value (i.e., list of fonts)
FontSizeValue = string
# 'font-size' property/attribute value
FontSizeAdjustValue = string
# 'font-size-adjust' property/attribute value
GlyphOrientationHorizontalValue = string
# 'glyph-orientation-horizontal' property/attribute value (e.g., <angle>)
GlyphOrientationVerticalValue = string
# 'glyph-orientation-vertical' property/attribute value (e.g., 'auto', <angle>)
Integer = string
# a <integer>
KerningValue = string
# 'kerning' property/attribute value (e.g., auto | <length>)
LanguageCode = xsd:NMTOKEN
# a language code, as per [RFC3066]
LanguageCodes = string
# comma-separated list of language codes, as per [RFC3066]
Length = string
# a <length>
Lengths = string
# a list of <length>s
LinkTarget = xsd:NMTOKEN
# link to this target
MarkerValue = string
# 'marker' property/attribute value (e.g., 'none', %URI;)
MaskValue = string
# 'mask' property/attribute value (e.g., 'none', %URI;)
MediaDesc = string
# comma-separated list of media descriptors.
Number = string
# a <number>
NumberOptionalNumber = string
# list of <number>s, but at least one and at most two
NumberOrPercentage = string
# a <number> or a  <percentage>
Numbers = string
# a list of <number>s
OpacityValue = string
# opacity value (e.g., <number>)
Paint = string
# a 'fill' or 'stroke' property/attribute value: <paint>
PathData = string
# a path data specification
Points = string
# a list of points
PreserveAspectRatioSpec = string
# 'preserveAspectRatio' attribute specification
Script = string
# script expression
SpacingValue = string
# 'letter-spacing' or 'word-spacing' property/attribute value (e.g., normal | <length>)
StrokeDashArrayValue = string
# 'stroke-dasharray' property/attribute value (e.g., 'none', list of <number>s)
StrokeDashOffsetValue = string
# 'stroke-dashoffset' property/attribute value (e.g., 'none', <legnth>)
StrokeMiterLimitValue = string
# 'stroke-miterlimit' property/attribute value (e.g., <number>)
StrokeWidthValue = string
# 'stroke-width' property/attribute value (e.g., <length>)
StructuredText =
  [ a:defaultValue = "structured text" ]
  attribute content { string "structured text" }?
StyleSheet = string
# style sheet data
SVGColor = string
# An SVG color value (RGB plus optional ICC)
Text = string
# arbitrary text string
TextDecorationValue = string
# 'text-decoration' property/attribute value (e.g., 'none', 'underline')
TransformList = string
# list of transforms
URI = string
# a Uniform Resource Identifier, see [URI]
ViewBoxSpec = string
# 'viewBox' attribute specification

# ==============================================================
# ENTITY DECLARATIONS: Collections of common attributes 
# ==============================================================

# All elements have an ID.
stdAttrs =
  attribute id { xsd:ID }?,
  attribute xml:base { URI }?
# Common attributes for elements that might contain character data content.
langSpaceAttrs =
  attribute xml:lang { LanguageCode }?,
  attribute xml:space { "default" | "preserve" }?
# Common attributes to check for system capabilities.
testAttrs =
  attribute requiredFeatures { FeatureList }?,
  attribute requiredExtensions { ExtensionList }?,
  attribute systemLanguage { LanguageCodes }?
# For most uses of URI referencing:
# standard XLink attributes other than xlink:href.
xlinkRefAttrs =
  [ a:defaultValue = "simple" ] attribute xlink:type { "simple" }?,
  attribute xlink:role { URI }?,
  attribute xlink:arcrole { URI }?,
  attribute xlink:title { text }?,
  [ a:defaultValue = "other" ] attribute xlink:show { "other" }?,
  [ a:defaultValue = "onLoad" ] attribute xlink:actuate { "onLoad" }?
# Standard XLink attributes for uses of URI referencing where xlink:show is 'embed'
xlinkRefAttrsEmbed =
  [ a:defaultValue = "simple" ] attribute xlink:type { "simple" }?,
  attribute xlink:role { URI }?,
  attribute xlink:arcrole { URI }?,
  attribute xlink:title { text }?,
  [ a:defaultValue = "embed" ] attribute xlink:show { "embed" }?,
  [ a:defaultValue = "onLoad" ] attribute xlink:actuate { "onLoad" }?
graphicsElementEvents =
  attribute onfocusin { Script }?,
  attribute onfocusout { Script }?,
  attribute onactivate { Script }?,
  attribute onclick { Script }?,
  attribute onmousedown { Script }?,
  attribute onmouseup { Script }?,
  attribute onmouseover { Script }?,
  attribute onmousemove { Script }?,
  attribute onmouseout { Script }?,
  attribute onload { Script }?
documentEvents =
  attribute onunload { Script }?,
  attribute onabort { Script }?,
  attribute onerror { Script }?,
  attribute onresize { Script }?,
  attribute onscroll { Script }?,
  attribute onzoom { Script }?
animationEvents =
  attribute onbegin { Script }?,
  attribute onend { Script }?,
  attribute onrepeat { Script }?
# This entity allows for at most one of desc, title and metadata,
# supplied in any order
descTitleMetadata =
  ((desc,
    ((title, metadata?) | (metadata, title?))?)
   | (title,
      ((desc, metadata?) | (metadata, desc?))?)
   | (metadata,
      ((desc, title?) | (title, desc?))?))?
# ==============================================================
# ENTITY DECLARATIONS: Collections of presentation attributes 
# ==============================================================

# The following presentation attributes have to do with specifying color.
PresentationAttributes-Color =
  attribute color { Color }?,
  attribute color-interpolation {
    "auto" | "sRGB" | "linearRGB" | "inherit"
  }?,
  attribute color-rendering {
    "auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"
  }?
# The following presentation attributes apply to container elements.
PresentationAttributes-Containers =
  attribute enable-background { EnableBackgroundValue }?
# The following presentation attributes apply to 'feFlood' elements.
PresentationAttributes-feFlood =
  attribute flood-color { SVGColor }?,
  attribute flood-opacity { OpacityValue }?
# The following presentation attributes apply to filling and stroking operations.
PresentationAttributes-FillStroke =
  attribute fill { Paint }?,
  attribute fill-opacity { OpacityValue }?,
  attribute fill-rule { ClipFillRule }?,
  attribute stroke { Paint }?,
  attribute stroke-dasharray { StrokeDashArrayValue }?,
  attribute stroke-dashoffset { StrokeDashOffsetValue }?,
  attribute stroke-linecap { "butt" | "round" | "square" | "inherit" }?,
  attribute stroke-linejoin {
    "miter" | "round" | "bevel" | "inherit"
  }?,
  attribute stroke-miterlimit { StrokeMiterLimitValue }?,
  attribute stroke-opacity { OpacityValue }?,
  attribute stroke-width { StrokeWidthValue }?
# The following presentation attributes apply to filter primitives.
PresentationAttributes-FilterPrimitives =
  attribute color-interpolation-filters {
    "auto" | "sRGB" | "linearRGB" | "inherit"
  }?
# The following presentation attributes have to do with selecting a font to use.
PresentationAttributes-FontSpecification =
  attribute font-family { FontFamilyValue }?,
  attribute font-size { FontSizeValue }?,
  attribute font-size-adjust { FontSizeAdjustValue }?,
  attribute font-stretch {
    "normal"
    | "wider"
    | "narrower"
    | "ultra-condensed"
    | "extra-condensed"
    | "condensed"
    | "semi-condensed"
    | "semi-expanded"
    | "expanded"
    | "extra-expanded"
    | "ultra-expanded"
    | "inherit"
  }?,
  attribute font-style { "normal" | "italic" | "oblique" | "inherit" }?,
  attribute font-variant { "normal" | "small-caps" | "inherit" }?,
  attribute font-weight {
    "normal"
    | "bold"
    | "bolder"
    | "lighter"
    | "100"
    | "200"
    | "300"
    | "400"
    | "500"
    | "600"
    | "700"
    | "800"
    | "900"
    | "inherit"
  }?
# The following presentation attributes apply to gradient 'stop' elements.
PresentationAttributes-Gradients =
  attribute stop-color { SVGColor }?,
  attribute stop-opacity { OpacityValue }?
# The following presentation attributes apply to graphics elements.
PresentationAttributes-Graphics =
  attribute clip-path { ClipPathValue }?,
  attribute clip-rule { ClipFillRule }?,
  attribute cursor { CursorValue }?,
  attribute display {
    "inline"
    | "block"
    | "list-item"
    | "run-in"
    | "compact"
    | "marker"
    | "table"
    | "inline-table"
    | "table-row-group"
    | "table-header-group"
    | "table-footer-group"
    | "table-row"
    | "table-column-group"
    | "table-column"
    | "table-cell"
    | "table-caption"
    | "none"
    | "inherit"
  }?,
  attribute filter { FilterValue }?,
  attribute image-rendering {
    "auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"
  }?,
  attribute mask { MaskValue }?,
  attribute opacity { OpacityValue }?,
  attribute pointer-events {
    "visiblePainted"
    | "visibleFill"
    | "visibleStroke"
    | "visible"
    | "painted"
    | "fill"
    | "stroke"
    | "all"
    | "none"
    | "inherit"
  }?,
  attribute shape-rendering {
    "auto"
    | "optimizeSpeed"
    | "crispEdges"
    | "geometricPrecision"
    | "inherit"
  }?,
  attribute text-rendering {
    "auto"
    | "optimizeSpeed"
    | "optimizeLegibility"
    | "geometricPrecision"
    | "inherit"
  }?,
  attribute visibility { "visible" | "hidden" | "inherit" }?
# The following presentation attributes apply to 'image' elements.
PresentationAttributes-Images = attribute color-profile { text }?
# The following presentation attributes apply to 'feDiffuseLighting' and 'feSpecularLighting' elements.
PresentationAttributes-LightingEffects =
  attribute lighting-color { SVGColor }?
# The following presentation attributes apply to marker operations.
PresentationAttributes-Markers =
  attribute marker-start { MarkerValue }?,
  attribute marker-mid { MarkerValue }?,
  attribute marker-end { MarkerValue }?
# The following presentation attributes apply to text content elements.
PresentationAttributes-TextContentElements =
  attribute alignment-baseline {
    "baseline"
    | "top"
    | "before-edge"
    | "text-top"
    | "text-before-edge"
    | "middle"
    | "bottom"
    | "after-edge"
    | "text-bottom"
    | "text-after-edge"
    | "ideographic"
    | "lower"
    | "hanging"
    | "mathematical"
    | "inherit"
  }?,
  attribute baseline-shift { BaselineShiftValue }?,
  attribute direction { "ltr" | "rtl" | "inherit" }?,
  attribute dominant-baseline {
    "auto"
    | "autosense-script"
    | "no-change"
    | "reset"
    | "ideographic"
    | "lower"
    | "hanging"
    | "mathematical"
    | "inherit"
  }?,
  attribute glyph-orientation-horizontal {
    GlyphOrientationHorizontalValue
  }?,
  attribute glyph-orientation-vertical {
    GlyphOrientationVerticalValue
  }?,
  attribute kerning { KerningValue }?,
  attribute letter-spacing { SpacingValue }?,
  attribute text-anchor { "start" | "middle" | "end" | "inherit" }?,
  attribute text-decoration { TextDecorationValue }?,
  attribute unicode-bidi {
    "normal" | "embed" | "bidi-override" | "inherit"
  }?,
  attribute word-spacing { SpacingValue }?
# The following presentation attributes apply to 'text' elements.
PresentationAttributes-TextElements =
  attribute writing-mode {
    "lr-tb" | "rl-tb" | "tb-rl" | "lr" | "rl" | "tb" | "inherit"
  }?
# The following presentation attributes apply to elements that establish viewports.
PresentationAttributes-Viewports =
  attribute clip { ClipValue }?,
  attribute overflow {
    "visible" | "hidden" | "scroll" | "auto" | "inherit"
  }?
# The following represents the complete list of presentation attributes.
PresentationAttributes-All =
  PresentationAttributes-Color,
  PresentationAttributes-Containers,
  PresentationAttributes-feFlood,
  PresentationAttributes-FillStroke,
  PresentationAttributes-FilterPrimitives,
  PresentationAttributes-FontSpecification,
  PresentationAttributes-Gradients,
  PresentationAttributes-Graphics,
  PresentationAttributes-Images,
  PresentationAttributes-LightingEffects,
  PresentationAttributes-Markers,
  PresentationAttributes-TextContentElements,
  PresentationAttributes-TextElements,
  PresentationAttributes-Viewports
# ==============================================================
# ENTITY DECLARATIONS: DTD extensions 
# ==============================================================

# Allow for extending the DTD with internal subset for 
# container and graphics elements
ceExt = notAllowed
geExt = notAllowed
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Document Structure 
# ==============================================================
svgExt = notAllowed
svg =
  element svg {
    attlist-svg,
    (desc
     | title
     | metadata
     | defs
     | path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | view
     | switch
     | a
     | altGlyphDef
     | script
     | style
     | symbol
     | marker
     | clipPath
     | mask
     | linearGradient
     | radialGradient
     | pattern
     | filter
     | cursor
     | font
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | color-profile
     | font-face
     | ceExt
     | svgExt)*
  }
attlist-svg &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute viewBox { ViewBoxSpec }?,
  [ a:defaultValue = "xMidYMid meet" ]
  attribute preserveAspectRatio { PreserveAspectRatioSpec }?,
  [ a:defaultValue = "magnify" ]
  attribute zoomAndPan { "disable" | "magnify" }?,
  graphicsElementEvents,
  documentEvents,
  [ a:defaultValue = "1.0" ] attribute version { string "1.0" }?,
  attribute x { Coordinate }?,
  attribute y { Coordinate }?,
  attribute width { Length }?,
  attribute height { Length }?,
  [ a:defaultValue = "text/ecmascript" ]
  attribute contentScriptType { ContentType }?,
  [ a:defaultValue = "text/css" ]
  attribute contentStyleType { ContentType }?
gExt = notAllowed
g =
  element g {
    attlist-g,
    (desc
     | title
     | metadata
     | defs
     | path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | view
     | switch
     | a
     | altGlyphDef
     | script
     | style
     | symbol
     | marker
     | clipPath
     | mask
     | linearGradient
     | radialGradient
     | pattern
     | filter
     | cursor
     | font
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | color-profile
     | font-face
     | ceExt
     | gExt)*
  }
attlist-g &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute transform { TransformList }?,
  graphicsElementEvents
defsExt = notAllowed
defs =
  element defs {
    attlist-defs,
    (desc
     | title
     | metadata
     | defs
     | path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | view
     | switch
     | a
     | altGlyphDef
     | script
     | style
     | symbol
     | marker
     | clipPath
     | mask
     | linearGradient
     | radialGradient
     | pattern
     | filter
     | cursor
     | font
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | color-profile
     | font-face
     | ceExt
     | defsExt)*
  }
attlist-defs &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute transform { TransformList }?,
  graphicsElementEvents
descExt = notAllowed
desc = element desc { attlist-desc, (text | descExt)* }
attlist-desc &=
  stdAttrs,
  langSpaceAttrs,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  StructuredText
titleExt = notAllowed
title = element title { attlist-title, (text | titleExt)* }
attlist-title &=
  stdAttrs,
  langSpaceAttrs,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  StructuredText
symbolExt = notAllowed
symbol =
  element symbol {
    attlist-symbol,
    (desc
     | title
     | metadata
     | defs
     | path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | view
     | switch
     | a
     | altGlyphDef
     | script
     | style
     | symbol
     | marker
     | clipPath
     | mask
     | linearGradient
     | radialGradient
     | pattern
     | filter
     | cursor
     | font
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | color-profile
     | font-face
     | ceExt
     | symbolExt)*
  }
attlist-symbol &=
  stdAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute viewBox { ViewBoxSpec }?,
  [ a:defaultValue = "xMidYMid meet" ]
  attribute preserveAspectRatio { PreserveAspectRatioSpec }?,
  graphicsElementEvents
useExt = notAllowed
use =
  element use {
    attlist-use,
    descTitleMetadata,
    (animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | geExt
     | useExt)*
  }
attlist-use &=
  stdAttrs,
  xlinkRefAttrsEmbed,
  attribute xlink:href { URI },
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute x { Coordinate }?,
  attribute y { Coordinate }?,
  attribute width { Length }?,
  attribute height { Length }?
imageExt = notAllowed
image =
  element image {
    attlist-image,
    descTitleMetadata,
    (animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | geExt
     | imageExt)*
  }
attlist-image &=
  stdAttrs,
  xlinkRefAttrsEmbed,
  attribute xlink:href { URI },
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-Graphics,
  PresentationAttributes-Images,
  PresentationAttributes-Viewports,
  attribute transform { TransformList }?,
  [ a:defaultValue = "xMidYMid meet" ]
  attribute preserveAspectRatio { PreserveAspectRatioSpec }?,
  graphicsElementEvents,
  attribute x { Coordinate }?,
  attribute y { Coordinate }?,
  attribute width { Length },
  attribute height { Length }
switchExt = notAllowed
switch =
  element switch {
    attlist-switch,
    descTitleMetadata,
    (path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | switch
     | a
     | foreignObject
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | ceExt
     | switchExt)*
  }
attlist-switch &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute transform { TransformList }?,
  graphicsElementEvents
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Styling 
# ==============================================================
style = element style { attlist-style, text }
attlist-style &=
  stdAttrs,
  [ a:defaultValue = "preserve" ] attribute xml:space { "preserve" }?,
  attribute type { ContentType },
  attribute media { MediaDesc }?,
  attribute title { Text }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Paths
# ==============================================================
pathExt = notAllowed
path =
  element path {
    attlist-path,
    descTitleMetadata,
    (animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | geExt
     | pathExt)*
  }
attlist-path &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-Graphics,
  PresentationAttributes-Markers,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute d { PathData },
  attribute pathLength { Number }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Basic Shapes
# ==============================================================
rectExt = notAllowed
rect =
  element rect {
    attlist-rect,
    descTitleMetadata,
    (animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | geExt
     | rectExt)*
  }
attlist-rect &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-Graphics,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute x { Coordinate }?,
  attribute y { Coordinate }?,
  attribute width { Length },
  attribute height { Length },
  attribute rx { Length }?,
  attribute ry { Length }?
circleExt = notAllowed
circle =
  element circle {
    attlist-circle,
    descTitleMetadata,
    (animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | geExt
     | circleExt)*
  }
attlist-circle &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-Graphics,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute cx { Coordinate }?,
  attribute cy { Coordinate }?,
  attribute r { Length }
ellipseExt = notAllowed
ellipse =
  element ellipse {
    attlist-ellipse,
    descTitleMetadata,
    (animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | geExt
     | ellipseExt)*
  }
attlist-ellipse &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-Graphics,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute cx { Coordinate }?,
  attribute cy { Coordinate }?,
  attribute rx { Length },
  attribute ry { Length }
lineExt = notAllowed
line =
  element line {
    attlist-line,
    descTitleMetadata,
    (animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | geExt
     | lineExt)*
  }
attlist-line &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-Graphics,
  PresentationAttributes-Markers,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute x1 { Coordinate }?,
  attribute y1 { Coordinate }?,
  attribute x2 { Coordinate }?,
  attribute y2 { Coordinate }?
polylineExt = notAllowed
polyline =
  element polyline {
    attlist-polyline,
    descTitleMetadata,
    (animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | geExt
     | polylineExt)*
  }
attlist-polyline &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-Graphics,
  PresentationAttributes-Markers,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute points { Points }
polygonExt = notAllowed
polygon =
  element polygon {
    attlist-polygon,
    descTitleMetadata,
    (animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | geExt
     | polygonExt)*
  }
attlist-polygon &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-Graphics,
  PresentationAttributes-Markers,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute points { Points }
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Text
# ==============================================================
textExt = notAllowed
\text =
  element text {
    attlist-text,
    (text
     | desc
     | title
     | metadata
     | tspan
     | tref
     | textPath
     | altGlyph
     | a
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | geExt
     | textExt)*
  }
attlist-text &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-FontSpecification,
  PresentationAttributes-Graphics,
  PresentationAttributes-TextContentElements,
  PresentationAttributes-TextElements,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute x { Coordinates }?,
  attribute y { Coordinates }?,
  attribute dx { Lengths }?,
  attribute dy { Lengths }?,
  attribute rotate { Numbers }?,
  attribute textLength { Length }?,
  attribute lengthAdjust { "spacing" | "spacingAndGlyphs" }?
tspanExt = notAllowed
tspan =
  element tspan {
    attlist-tspan,
    (text
     | desc
     | title
     | metadata
     | tspan
     | tref
     | altGlyph
     | a
     | animate
     | set
     | animateColor
     | tspanExt)*
  }
attlist-tspan &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-FontSpecification,
  PresentationAttributes-Graphics,
  PresentationAttributes-TextContentElements,
  graphicsElementEvents,
  attribute x { Coordinates }?,
  attribute y { Coordinates }?,
  attribute dx { Lengths }?,
  attribute dy { Lengths }?,
  attribute rotate { Numbers }?,
  attribute textLength { Length }?,
  attribute lengthAdjust { "spacing" | "spacingAndGlyphs" }?
trefExt = notAllowed
tref =
  element tref {
    attlist-tref,
    (desc | title | metadata | animate | set | animateColor | trefExt)*
  }
attlist-tref &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI },
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-FontSpecification,
  PresentationAttributes-Graphics,
  PresentationAttributes-TextContentElements,
  graphicsElementEvents,
  attribute x { Coordinates }?,
  attribute y { Coordinates }?,
  attribute dx { Lengths }?,
  attribute dy { Lengths }?,
  attribute rotate { Numbers }?,
  attribute textLength { Length }?,
  attribute lengthAdjust { "spacing" | "spacingAndGlyphs" }?
textPathExt = notAllowed
textPath =
  element textPath {
    attlist-textPath,
    (text
     | desc
     | title
     | metadata
     | tspan
     | tref
     | altGlyph
     | a
     | animate
     | set
     | animateColor
     | textPathExt)*
  }
attlist-textPath &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI },
  langSpaceAttrs,
  testAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-FontSpecification,
  PresentationAttributes-Graphics,
  PresentationAttributes-TextContentElements,
  graphicsElementEvents,
  attribute startOffset { Length }?,
  attribute textLength { Length }?,
  attribute lengthAdjust { "spacing" | "spacingAndGlyphs" }?,
  attribute method { "align" | "stretch" }?,
  attribute spacing { "auto" | "exact" }?
altGlyphExt = notAllowed
altGlyph = element altGlyph { attlist-altGlyph, (text | altGlyphExt)* }
attlist-altGlyph &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI }?,
  attribute glyphRef { text }?,
  attribute format { text }?,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-FontSpecification,
  PresentationAttributes-Graphics,
  PresentationAttributes-TextContentElements,
  graphicsElementEvents,
  attribute x { Coordinates }?,
  attribute y { Coordinates }?,
  attribute dx { Lengths }?,
  attribute dy { Lengths }?,
  attribute rotate { Numbers }?
altGlyphDefExt = notAllowed
altGlyphDef =
  element altGlyphDef {
    attlist-altGlyphDef,
    ((glyphRef+ | altGlyphItem+) | altGlyphDefExt)
  }
attlist-altGlyphDef &= stdAttrs
altGlyphItemExt = notAllowed
altGlyphItem =
  element altGlyphItem {
    attlist-altGlyphItem, (glyphRef+ | altGlyphItemExt)
  }
attlist-altGlyphItem &= stdAttrs
glyphRef = element glyphRef { attlist-glyphRef, empty }
attlist-glyphRef &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-FontSpecification,
  attribute glyphRef { text }?,
  attribute format { text }?,
  attribute x { Number }?,
  attribute y { Number }?,
  attribute dx { Number }?,
  attribute dy { Number }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Painting: Filling, Stroking and Marker Symbols 
# ==============================================================
markerExt = notAllowed
marker =
  element marker {
    attlist-marker,
    (desc
     | title
     | metadata
     | defs
     | path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | view
     | switch
     | a
     | altGlyphDef
     | script
     | style
     | symbol
     | marker
     | clipPath
     | mask
     | linearGradient
     | radialGradient
     | pattern
     | filter
     | cursor
     | font
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | color-profile
     | font-face
     | ceExt
     | markerExt)*
  }
attlist-marker &=
  stdAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute viewBox { ViewBoxSpec }?,
  [ a:defaultValue = "xMidYMid meet" ]
  attribute preserveAspectRatio { PreserveAspectRatioSpec }?,
  attribute refX { Coordinate }?,
  attribute refY { Coordinate }?,
  attribute markerUnits { "strokeWidth" | "userSpaceOnUse" }?,
  attribute markerWidth { Length }?,
  attribute markerHeight { Length }?,
  attribute orient { text }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Color 
# ==============================================================
color-profile =
  element color-profile { attlist-color-profile, descTitleMetadata }
attlist-color-profile &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI }?,
  attribute local { text }?,
  attribute name { text },
  [ a:defaultValue = "auto" ]
  attribute rendering-intent {
    "auto"
    | "perceptual"
    | "relative-colorimetric"
    | "saturation"
    | "absolute-colorimetric"
  }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Gradients and Patterns 
# ==============================================================
linearGradientExt = notAllowed
linearGradient =
  element linearGradient {
    attlist-linearGradient,
    descTitleMetadata,
    (stop | animate | set | animateTransform | linearGradientExt)*
  }
attlist-linearGradient &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI }?,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-Gradients,
  attribute gradientUnits { "userSpaceOnUse" | "objectBoundingBox" }?,
  attribute gradientTransform { TransformList }?,
  attribute x1 { Coordinate }?,
  attribute y1 { Coordinate }?,
  attribute x2 { Coordinate }?,
  attribute y2 { Coordinate }?,
  attribute spreadMethod { "pad" | "reflect" | "repeat" }?
radialGradientExt = notAllowed
radialGradient =
  element radialGradient {
    attlist-radialGradient,
    descTitleMetadata,
    (stop | animate | set | animateTransform | radialGradientExt)*
  }
attlist-radialGradient &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI }?,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-Gradients,
  attribute gradientUnits { "userSpaceOnUse" | "objectBoundingBox" }?,
  attribute gradientTransform { TransformList }?,
  attribute cx { Coordinate }?,
  attribute cy { Coordinate }?,
  attribute r { Length }?,
  attribute fx { Coordinate }?,
  attribute fy { Coordinate }?,
  attribute spreadMethod { "pad" | "reflect" | "repeat" }?
stopExt = notAllowed
stop =
  element stop {
    attlist-stop, (animate | set | animateColor | stopExt)*
  }
attlist-stop &=
  stdAttrs,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-Gradients,
  attribute offset { NumberOrPercentage }
patternExt = notAllowed
pattern =
  element pattern {
    attlist-pattern,
    (desc
     | title
     | metadata
     | defs
     | path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | view
     | switch
     | a
     | altGlyphDef
     | script
     | style
     | symbol
     | marker
     | clipPath
     | mask
     | linearGradient
     | radialGradient
     | pattern
     | filter
     | cursor
     | font
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | color-profile
     | font-face
     | ceExt
     | patternExt)*
  }
attlist-pattern &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI }?,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute viewBox { ViewBoxSpec }?,
  [ a:defaultValue = "xMidYMid meet" ]
  attribute preserveAspectRatio { PreserveAspectRatioSpec }?,
  attribute patternUnits { "userSpaceOnUse" | "objectBoundingBox" }?,
  attribute patternContentUnits {
    "userSpaceOnUse" | "objectBoundingBox"
  }?,
  attribute patternTransform { TransformList }?,
  attribute x { Coordinate }?,
  attribute y { Coordinate }?,
  attribute width { Length }?,
  attribute height { Length }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Clipping, Masking and Compositing 
# ==============================================================
clipPathExt = notAllowed
clipPath =
  element clipPath {
    attlist-clipPath,
    descTitleMetadata,
    (path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | ceExt
     | clipPathExt)*
  }
attlist-clipPath &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FillStroke,
  PresentationAttributes-FontSpecification,
  PresentationAttributes-Graphics,
  PresentationAttributes-TextContentElements,
  PresentationAttributes-TextElements,
  attribute transform { TransformList }?,
  attribute clipPathUnits { "userSpaceOnUse" | "objectBoundingBox" }?
maskExt = notAllowed
mask =
  element mask {
    attlist-mask,
    (desc
     | title
     | metadata
     | defs
     | path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | view
     | switch
     | a
     | altGlyphDef
     | script
     | style
     | symbol
     | marker
     | clipPath
     | mask
     | linearGradient
     | radialGradient
     | pattern
     | filter
     | cursor
     | font
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | color-profile
     | font-face
     | ceExt
     | maskExt)*
  }
attlist-mask &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute maskUnits { "userSpaceOnUse" | "objectBoundingBox" }?,
  attribute maskContentUnits {
    "userSpaceOnUse" | "objectBoundingBox"
  }?,
  attribute x { Coordinate }?,
  attribute y { Coordinate }?,
  attribute width { Length }?,
  attribute height { Length }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Filter Effects
# ==============================================================
filterExt = notAllowed
filter =
  element filter {
    attlist-filter,
    descTitleMetadata,
    (feBlend
     | feFlood
     | feColorMatrix
     | feComponentTransfer
     | feComposite
     | feConvolveMatrix
     | feDiffuseLighting
     | feDisplacementMap
     | feGaussianBlur
     | feImage
     | feMerge
     | feMorphology
     | feOffset
     | feSpecularLighting
     | feTile
     | feTurbulence
     | animate
     | set
     | filterExt)*
  }
attlist-filter &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI }?,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute filterUnits { "userSpaceOnUse" | "objectBoundingBox" }?,
  attribute primitiveUnits { "userSpaceOnUse" | "objectBoundingBox" }?,
  attribute x { Coordinate }?,
  attribute y { Coordinate }?,
  attribute width { Length }?,
  attribute height { Length }?,
  attribute filterRes { NumberOptionalNumber }?
filter_primitive_attributes =
  attribute x { Coordinate }?,
  attribute y { Coordinate }?,
  attribute width { Length }?,
  attribute height { Length }?,
  attribute result { text }?
filter_primitive_attributes_with_in =
  filter_primitive_attributes,
  attribute in { text }?
feDistantLight =
  element feDistantLight { attlist-feDistantLight, (animate | set)* }
attlist-feDistantLight &=
  stdAttrs,
  attribute azimuth { Number }?,
  attribute elevation { Number }?
fePointLight =
  element fePointLight { attlist-fePointLight, (animate | set)* }
attlist-fePointLight &=
  stdAttrs,
  attribute x { Number }?,
  attribute y { Number }?,
  attribute z { Number }?
feSpotLight =
  element feSpotLight { attlist-feSpotLight, (animate | set)* }
attlist-feSpotLight &=
  stdAttrs,
  attribute x { Number }?,
  attribute y { Number }?,
  attribute z { Number }?,
  attribute pointsAtX { Number }?,
  attribute pointsAtY { Number }?,
  attribute pointsAtZ { Number }?,
  attribute specularExponent { Number }?,
  attribute limitingConeAngle { Number }?
feBlend = element feBlend { attlist-feBlend, (animate | set)* }
attlist-feBlend &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in,
  attribute in2 { text },
  [ a:defaultValue = "normal" ]
  attribute mode {
    "normal" | "multiply" | "screen" | "darken" | "lighten"
  }?
feColorMatrix =
  element feColorMatrix { attlist-feColorMatrix, (animate | set)* }
attlist-feColorMatrix &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in,
  [ a:defaultValue = "matrix" ]
  attribute type {
    "matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"
  }?,
  attribute values { text }?
feComponentTransfer =
  element feComponentTransfer {
    attlist-feComponentTransfer, feFuncR?, feFuncG?, feFuncB?, feFuncA?
  }
attlist-feComponentTransfer &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in
component_transfer_function_attributes =
  attribute type {
    "identity" | "table" | "discrete" | "linear" | "gamma"
  },
  attribute tableValues { text }?,
  attribute slope { Number }?,
  attribute intercept { Number }?,
  attribute amplitude { Number }?,
  attribute exponent { Number }?,
  attribute offset { Number }?
feFuncR = element feFuncR { attlist-feFuncR, (animate | set)* }
attlist-feFuncR &= stdAttrs, component_transfer_function_attributes
feFuncG = element feFuncG { attlist-feFuncG, (animate | set)* }
attlist-feFuncG &= stdAttrs, component_transfer_function_attributes
feFuncB = element feFuncB { attlist-feFuncB, (animate | set)* }
attlist-feFuncB &= stdAttrs, component_transfer_function_attributes
feFuncA = element feFuncA { attlist-feFuncA, (animate | set)* }
attlist-feFuncA &= stdAttrs, component_transfer_function_attributes
feComposite =
  element feComposite { attlist-feComposite, (animate | set)* }
attlist-feComposite &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in,
  attribute in2 { text },
  [ a:defaultValue = "over" ]
  attribute operator {
    "over" | "in" | "out" | "atop" | "xor" | "arithmetic"
  }?,
  attribute k1 { Number }?,
  attribute k2 { Number }?,
  attribute k3 { Number }?,
  attribute k4 { Number }?
feConvolveMatrix =
  element feConvolveMatrix {
    attlist-feConvolveMatrix, (animate | set)*
  }
attlist-feConvolveMatrix &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in,
  attribute order { NumberOptionalNumber },
  attribute kernelMatrix { text },
  attribute divisor { Number }?,
  attribute bias { Number }?,
  attribute targetX { Integer }?,
  attribute targetY { Integer }?,
  [ a:defaultValue = "duplicate" ]
  attribute edgeMode { "duplicate" | "wrap" | "none" }?,
  attribute kernelUnitLength { NumberOptionalNumber }?,
  attribute preserveAlpha { Boolean }?
feDiffuseLighting =
  element feDiffuseLighting {
    attlist-feDiffuseLighting,
    (feDistantLight | fePointLight | feSpotLight),
    (animate | set | animateColor)*
  }
attlist-feDiffuseLighting &=
  stdAttrs,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FilterPrimitives,
  PresentationAttributes-LightingEffects,
  filter_primitive_attributes_with_in,
  attribute surfaceScale { Number }?,
  attribute diffuseConstant { Number }?,
  attribute kernelUnitLength { NumberOptionalNumber }?
feDisplacementMap =
  element feDisplacementMap {
    attlist-feDisplacementMap, (animate | set)*
  }
attlist-feDisplacementMap &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in,
  attribute in2 { text },
  attribute scale { Number }?,
  [ a:defaultValue = "A" ]
  attribute xChannelSelector { "R" | "G" | "B" | "A" }?,
  [ a:defaultValue = "A" ]
  attribute yChannelSelector { "R" | "G" | "B" | "A" }?
feFlood =
  element feFlood { attlist-feFlood, (animate | set | animateColor)* }
attlist-feFlood &=
  stdAttrs,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-feFlood,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in
feGaussianBlur =
  element feGaussianBlur { attlist-feGaussianBlur, (animate | set)* }
attlist-feGaussianBlur &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in,
  attribute stdDeviation { NumberOptionalNumber }?
feImage =
  element feImage {
    attlist-feImage, (animate | set | animateTransform)*
  }
attlist-feImage &=
  stdAttrs,
  xlinkRefAttrsEmbed,
  attribute xlink:href { URI },
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  filter_primitive_attributes,
  [ a:defaultValue = "xMidYMid meet" ]
  attribute preserveAspectRatio { PreserveAspectRatioSpec }?
feMerge = element feMerge { attlist-feMerge, feMergeNode* }
attlist-feMerge &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes
feMergeNode =
  element feMergeNode { attlist-feMergeNode, (animate | set)* }
attlist-feMergeNode &=
  stdAttrs,
  attribute in { text }?
feMorphology =
  element feMorphology { attlist-feMorphology, (animate | set)* }
attlist-feMorphology &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in,
  [ a:defaultValue = "erode" ]
  attribute operator { "erode" | "dilate" }?,
  attribute radius { NumberOptionalNumber }?
feOffset = element feOffset { attlist-feOffset, (animate | set)* }
attlist-feOffset &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in,
  attribute dx { Number }?,
  attribute dy { Number }?
feSpecularLighting =
  element feSpecularLighting {
    attlist-feSpecularLighting,
    (feDistantLight | fePointLight | feSpotLight),
    (animate | set | animateColor)*
  }
attlist-feSpecularLighting &=
  stdAttrs,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-Color,
  PresentationAttributes-FilterPrimitives,
  PresentationAttributes-LightingEffects,
  filter_primitive_attributes_with_in,
  attribute surfaceScale { Number }?,
  attribute specularConstant { Number }?,
  attribute specularExponent { Number }?,
  attribute kernelUnitLength { NumberOptionalNumber }?
feTile = element feTile { attlist-feTile, (animate | set)* }
attlist-feTile &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes_with_in
feTurbulence =
  element feTurbulence { attlist-feTurbulence, (animate | set)* }
attlist-feTurbulence &=
  stdAttrs,
  PresentationAttributes-FilterPrimitives,
  filter_primitive_attributes,
  attribute baseFrequency { NumberOptionalNumber }?,
  attribute numOctaves { Integer }?,
  attribute seed { Number }?,
  [ a:defaultValue = "noStitch" ]
  attribute stitchTiles { "stitch" | "noStitch" }?,
  [ a:defaultValue = "turbulence" ]
  attribute type { "fractalNoise" | "turbulence" }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Interactivity 
# ==============================================================
cursor = element cursor { attlist-cursor, descTitleMetadata }
attlist-cursor &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI },
  testAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute x { Coordinate }?,
  attribute y { Coordinate }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Linking
# ==============================================================
aExt = notAllowed
a =
  element a {
    attlist-a,
    (text
     | desc
     | title
     | metadata
     | defs
     | path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | view
     | switch
     | a
     | altGlyphDef
     | script
     | style
     | symbol
     | marker
     | clipPath
     | mask
     | linearGradient
     | radialGradient
     | pattern
     | filter
     | cursor
     | font
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | color-profile
     | font-face
     | ceExt
     | aExt)*
  }
attlist-a &=
  stdAttrs,
  [ a:defaultValue = "simple" ] attribute xlink:type { "simple" }?,
  attribute xlink:role { URI }?,
  attribute xlink:arcrole { URI }?,
  attribute xlink:title { text }?,
  [ a:defaultValue = "replace" ]
  attribute xlink:show { "new" | "replace" }?,
  [ a:defaultValue = "onRequest" ]
  attribute xlink:actuate { "onRequest" }?,
  attribute xlink:href { URI },
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute target { LinkTarget }?
viewExt = notAllowed
view = element view { attlist-view, (descTitleMetadata | viewExt) }
attlist-view &=
  stdAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute viewBox { ViewBoxSpec }?,
  [ a:defaultValue = "xMidYMid meet" ]
  attribute preserveAspectRatio { PreserveAspectRatioSpec }?,
  [ a:defaultValue = "magnify" ]
  attribute zoomAndPan { "disable" | "magnify" }?,
  attribute viewTarget { text }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Scripting 
# ==============================================================
script = element script { attlist-script, text }
attlist-script &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI }?,
  attribute externalResourcesRequired { Boolean }?,
  attribute type { ContentType }
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Animation 
# ==============================================================
animElementAttrs =
  xlinkRefAttrs,
  attribute xlink:href { URI }?
animAttributeAttrs =
  attribute attributeName { text },
  attribute attributeType { text }?
animTimingAttrs =
  attribute begin { text }?,
  attribute dur { text }?,
  attribute end { text }?,
  attribute min { text }?,
  attribute max { text }?,
  [ a:defaultValue = "always" ]
  attribute restart { "always" | "never" | "whenNotActive" }?,
  attribute repeatCount { text }?,
  attribute repeatDur { text }?,
  [ a:defaultValue = "remove" ] attribute fill { "remove" | "freeze" }?
animValueAttrs =
  [ a:defaultValue = "linear" ]
  attribute calcMode { "discrete" | "linear" | "paced" | "spline" }?,
  attribute values { text }?,
  attribute keyTimes { text }?,
  attribute keySplines { text }?,
  attribute from { text }?,
  attribute to { text }?,
  attribute by { text }?
animAdditionAttrs =
  [ a:defaultValue = "replace" ]
  attribute additive { "replace" | "sum" }?,
  [ a:defaultValue = "none" ] attribute accumulate { "none" | "sum" }?
animateExt = notAllowed
animate =
  element animate { attlist-animate, (descTitleMetadata | animateExt) }
attlist-animate &=
  stdAttrs,
  testAttrs,
  attribute externalResourcesRequired { Boolean }?,
  animationEvents,
  animElementAttrs,
  animAttributeAttrs,
  animTimingAttrs,
  animValueAttrs,
  animAdditionAttrs
setExt = notAllowed
set = element set { attlist-set, (descTitleMetadata | setExt) }
attlist-set &=
  stdAttrs,
  testAttrs,
  attribute externalResourcesRequired { Boolean }?,
  animationEvents,
  animElementAttrs,
  animAttributeAttrs,
  animTimingAttrs,
  attribute to { text }?
animateMotionExt = empty
animateMotion =
  element animateMotion {
    attlist-animateMotion, descTitleMetadata, mpath?, animateMotionExt
  }
attlist-animateMotion &=
  stdAttrs,
  testAttrs,
  attribute externalResourcesRequired { Boolean }?,
  animationEvents,
  animElementAttrs,
  animTimingAttrs,
  [ a:defaultValue = "paced" ]
  attribute calcMode { "discrete" | "linear" | "paced" | "spline" }?,
  attribute values { text }?,
  attribute keyTimes { text }?,
  attribute keySplines { text }?,
  attribute from { text }?,
  attribute to { text }?,
  attribute by { text }?,
  animAdditionAttrs,
  attribute path { text }?,
  attribute keyPoints { text }?,
  attribute rotate { text }?,
  attribute origin { text }?
mpathExt = notAllowed
mpath = element mpath { attlist-mpath, (descTitleMetadata | mpathExt) }
attlist-mpath &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI },
  attribute externalResourcesRequired { Boolean }?
animateColorExt = notAllowed
animateColor =
  element animateColor {
    attlist-animateColor, (descTitleMetadata | animateColorExt)
  }
attlist-animateColor &=
  stdAttrs,
  testAttrs,
  attribute externalResourcesRequired { Boolean }?,
  animationEvents,
  animElementAttrs,
  animAttributeAttrs,
  animTimingAttrs,
  animValueAttrs,
  animAdditionAttrs
animateTransformExt = notAllowed
animateTransform =
  element animateTransform {
    attlist-animateTransform, (descTitleMetadata | animateTransformExt)
  }
attlist-animateTransform &=
  stdAttrs,
  testAttrs,
  attribute externalResourcesRequired { Boolean }?,
  animationEvents,
  animElementAttrs,
  animAttributeAttrs,
  animTimingAttrs,
  animValueAttrs,
  animAdditionAttrs,
  [ a:defaultValue = "translate" ]
  attribute type {
    "translate" | "scale" | "rotate" | "skewX" | "skewY"
  }?
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Fonts 
# ==============================================================
fontExt = notAllowed
font =
  element font {
    attlist-font,
    descTitleMetadata,
    font-face,
    missing-glyph,
    (glyph | hkern | vkern | fontExt)*
  }
attlist-font &=
  stdAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute horiz-origin-x { Number }?,
  attribute horiz-origin-y { Number }?,
  attribute horiz-adv-x { Number },
  attribute vert-origin-x { Number }?,
  attribute vert-origin-y { Number }?,
  attribute vert-adv-y { Number }?
glyphExt = notAllowed
glyph =
  element glyph {
    attlist-glyph,
    (desc
     | title
     | metadata
     | defs
     | path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | view
     | switch
     | a
     | altGlyphDef
     | script
     | style
     | symbol
     | marker
     | clipPath
     | mask
     | linearGradient
     | radialGradient
     | pattern
     | filter
     | cursor
     | font
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | color-profile
     | font-face
     | glyphExt)*
  }
attlist-glyph &=
  stdAttrs,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute unicode { text }?,
  attribute glyph-name { text }?,
  attribute d { PathData }?,
  attribute orientation { text }?,
  attribute arabic-form { text }?,
  attribute lang { LanguageCodes }?,
  attribute horiz-adv-x { Number }?,
  attribute vert-origin-x { Number }?,
  attribute vert-origin-y { Number }?,
  attribute vert-adv-y { Number }?
missing-glyphExt = notAllowed
missing-glyph =
  element missing-glyph {
    attlist-missing-glyph,
    (desc
     | title
     | metadata
     | defs
     | path
     | \text
     | rect
     | circle
     | ellipse
     | line
     | polyline
     | polygon
     | use
     | image
     | svg
     | g
     | view
     | switch
     | a
     | altGlyphDef
     | script
     | style
     | symbol
     | marker
     | clipPath
     | mask
     | linearGradient
     | radialGradient
     | pattern
     | filter
     | cursor
     | font
     | animate
     | set
     | animateMotion
     | animateColor
     | animateTransform
     | color-profile
     | font-face
     | missing-glyphExt)*
  }
attlist-missing-glyph &=
  stdAttrs,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute d { PathData }?,
  attribute horiz-adv-x { Number }?,
  attribute vert-origin-x { Number }?,
  attribute vert-origin-y { Number }?,
  attribute vert-adv-y { Number }?
hkern = element hkern { attlist-hkern, empty }
attlist-hkern &=
  stdAttrs,
  attribute u1 { text }?,
  attribute g1 { text }?,
  attribute u2 { text }?,
  attribute g2 { text }?,
  attribute k { Number }
vkern = element vkern { attlist-vkern, empty }
attlist-vkern &=
  stdAttrs,
  attribute u1 { text }?,
  attribute g1 { text }?,
  attribute u2 { text }?,
  attribute g2 { text }?,
  attribute k { Number }
font-face =
  element font-face {
    attlist-font-face,
    descTitleMetadata,
    font-face-src?,
    definition-src?
  }
attlist-font-face &=
  stdAttrs,
  attribute font-family { text }?,
  attribute font-style { text }?,
  attribute font-variant { text }?,
  attribute font-weight { text }?,
  attribute font-stretch { text }?,
  attribute font-size { text }?,
  attribute unicode-range { text }?,
  attribute units-per-em { Number }?,
  attribute panose-1 { text }?,
  attribute stemv { Number }?,
  attribute stemh { Number }?,
  attribute slope { Number }?,
  attribute cap-height { Number }?,
  attribute x-height { Number }?,
  attribute accent-height { Number }?,
  attribute ascent { Number }?,
  attribute descent { Number }?,
  attribute widths { text }?,
  attribute bbox { text }?,
  attribute ideographic { Number }?,
  attribute alphabetic { Number }?,
  attribute mathematical { Number }?,
  attribute hanging { Number }?,
  attribute v-ideographic { Number }?,
  attribute v-alphabetic { Number }?,
  attribute v-mathematical { Number }?,
  attribute v-hanging { Number }?,
  attribute underline-position { Number }?,
  attribute underline-thickness { Number }?,
  attribute strikethrough-position { Number }?,
  attribute strikethrough-thickness { Number }?,
  attribute overline-position { Number }?,
  attribute overline-thickness { Number }?
font-face-src =
  element font-face-src {
    attlist-font-face-src, (font-face-uri | font-face-name)+
  }
attlist-font-face-src &= stdAttrs
font-face-uri =
  element font-face-uri { attlist-font-face-uri, font-face-format* }
attlist-font-face-uri &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI }
font-face-format =
  element font-face-format { attlist-font-face-format, empty }
attlist-font-face-format &=
  stdAttrs,
  attribute string { text }?
font-face-name =
  element font-face-name { attlist-font-face-name, empty }
attlist-font-face-name &=
  stdAttrs,
  attribute name { text }?
definition-src =
  element definition-src { attlist-definition-src, empty }
attlist-definition-src &=
  stdAttrs,
  xlinkRefAttrs,
  attribute xlink:href { URI }
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Metadata 
# ==============================================================
metadataExt = notAllowed
metadata = element metadata { attlist-metadata, (text | metadataExt)* }
attlist-metadata &= stdAttrs
# ==============================================================
# DECLARATIONS CORRESPONDING TO: Extensibility 
# ==============================================================
foreignObjectExt = notAllowed
foreignObject =
  element foreignObject {
    attlist-foreignObject, (text | ceExt | foreignObjectExt)*
  }
attlist-foreignObject &=
  stdAttrs,
  testAttrs,
  langSpaceAttrs,
  attribute externalResourcesRequired { Boolean }?,
  attribute class { ClassList }?,
  attribute style { StyleSheet }?,
  PresentationAttributes-All,
  attribute transform { TransformList }?,
  graphicsElementEvents,
  attribute x { Coordinate }?,
  attribute y { Coordinate }?,
  attribute width { Length },
  attribute height { Length },
  StructuredText
start =
  feColorMatrix
  | pattern
  | feDisplacementMap
  | altGlyph
  | font-face-name
  | altGlyphDef
  | switch
  | use
  | rect
  | feSpecularLighting
  | line
  | title
  | metadata
  | feGaussianBlur
  | feSpotLight
  | feMerge
  | desc
  | definition-src
  | defs
  | glyphRef
  | animateTransform
  | vkern
  | tspan
  | feOffset
  | fePointLight
  | set
  | animateMotion
  | radialGradient
  | feTile
  | altGlyphItem
  | g
  | foreignObject
  | textPath
  | a
  | style
  | path
  | font-face
  | tref
  | feFuncA
  | feFuncB
  | missing-glyph
  | feFuncG
  | mask
  | animate
  | feMorphology
  | polyline
  | feFuncR
  | ellipse
  | circle
  | feTurbulence
  | linearGradient
  | feConvolveMatrix
  | svg
  | color-profile
  | feBlend
  | font
  | feComposite
  | font-face-uri
  | feComponentTransfer
  | feImage
  | marker
  | stop
  | feMergeNode
  | image
  | polygon
  | view
  | \text
  | symbol
  | filter
  | animateColor
  | font-face-src
  | clipPath
  | feDiffuseLighting
  | font-face-format
  | glyph
  | script
  | hkern
  | feFlood
  | mpath
  | cursor
  | feDistantLight
